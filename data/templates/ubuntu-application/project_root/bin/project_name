#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk

import gettext
from gettext import gettext as _
gettext.textdomain('project_name')

# Add project root directory (enable symlink and trunk execution)
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'python_name'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from python_name import Basecamel_case_nameWindow
import python_name.helpers as helpers


# See Basecamel_case_nameWindow.py for more details about how this class works
class camel_case_nameWindow(Basecamel_case_nameWindow.Basecamel_case_nameWindow):
    __gtype_name__ = "camel_case_nameWindow"
    
    def finish_initializing(self, builder):
        """Set up the main window"""
        super(camel_case_nameWindow, self).finish_initializing(builder)

        # Uncomment the following code to read in preferences at start up (this
        # function is defined in Basecamel_case_nameWindow.py).
        # Preferences can be read from the dictionary self.preferences after this call.
        #self.load_preferences()

        # Code for other initialization actions should be added here.

    def preferences_updated(self):
        """Update window based on preference changes"""
        # This will be called when the preference dialog is closed.
        # Preferences can be read from the dictionary self.preferences.
        pass


if __name__ == "__main__":
    # Support for command line options.  See helpers.py to add more.
    helpers.parse_options()

    # Run the application.
    window = camel_case_nameWindow()
    window.show()
    gtk.main()
