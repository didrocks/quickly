#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk

import gettext
from gettext import gettext as _
gettext.textdomain('test-project')

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'test_project'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from test_project import (
    AboutTestProjectDialog, PreferencesTestProjectDialog)
from test_project.helpers import get_builder


class TestProjectWindow(gtk.Window):
    __gtype_name__ = "TestProjectWindow"

    def __init__(self):
        """Construct a TestProjectWindow.

        This function is typically not called directly. Creation a
        TestProjectWindow requires rereading the associated ui file and
        parsing the ui definition externally, and then calling
        TestProjectWindow.finish_initializing().

        Use the convenience function NewTestProjectWindow to create
        TestProjectWindow object.
        """
        pass

    def finish_initializing(self, builder):
        """Called after we've finished initializing.

        finish_initalizing should be called after parsing the UI definition
        and creating a TestProjectWindow object with it in order to finish
        initializing the start of the new TestProjectWindow instance.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)

        # Uncomment the following code to read in preferences at start up.
        #dlg = PreferencesTestProjectDialog.NewPreferencesTestProjectDialog()
        #self.preferences = dlg.get_preferences()

        # Code for other initialization actions should be added here.

    def about(self, widget, data=None):
        """Display the about box for test-project."""
        about = AboutTestProjectDialog.NewAboutTestProjectDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for test-project."""
        prefs = PreferencesTestProjectDialog.NewPreferencesTestProjectDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            # Make any updates based on changed preferences here.
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """Signal handler for closing the TestProjectWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the TestProjectWindow is closed."""
        # Clean up code for saving application state should be added here.
        gtk.main_quit()


def NewTestProjectWindow():
    """NewTestProjectWindow - returns a fully instantiated
    TestProjectWindow object. Use this function rather than
    creating a TestProjectWindow directly.
    """
    builder = get_builder('TestProjectWindow')
    dialog = builder.get_object("test_project_window")
    dialog.finish_initializing(builder)
    return dialog

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    # Run the application.
    window = NewTestProjectWindow()
    window.show()
    gtk.main()
