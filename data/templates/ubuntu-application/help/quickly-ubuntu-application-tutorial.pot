# Quickly Documentation
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-02-19 16:46+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: author
#: quickly-ubuntu-application-tutorial.xml:12
#, no-c-format
msgid "<firstname>Shane</firstname> <surname>Fagan</surname>"
msgstr ""

#. Tag: author
#: quickly-ubuntu-application-tutorial.xml:16
#, no-c-format
msgid "<firstname>Rick</firstname> <surname>Spencer</surname>"
msgstr ""

#. Tag: corpauthor
#: quickly-ubuntu-application-tutorial.xml:20
#, no-c-format
msgid "Canonical ltd"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:30
#, no-c-format
msgid "&appname; &appversion; User Guide"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:35
#, no-c-format
msgid "About This Guide"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:36
#, no-c-format
msgid "<application>Quickly</application> is a set of choices about writing apps for Ubuntu. Out of all the wonderful richness and variety of programming for Linux, <application>Quickly</application> make some very opinionated choices about what tools to use, and how to combine them. The criteria for these choices was to make it easy and fun to write and release Linux applications, even if it's your first time trying, but also in a way that delivers the full power and flexibility of the platform. One benefit of these choices, is that it's also easier to write tools that make it even easier and more fun. So <application>Quickly</application> is also a set of commands."
msgstr ""

#. Tag: link
#: quickly-ubuntu-application-tutorial.xml:39
#, no-c-format
msgid "<link>Getting Started</link>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:45
#, no-c-format
msgid "<title>Getting Started</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:46
#, no-c-format
msgid "Welcome to the <application>Quickly</application> tutorial. In this guide you will learn how to get started using <application>Quickly</application>."
msgstr ""

#. Tag: link
#: quickly-ubuntu-application-tutorial.xml:49
#, no-c-format
msgid "<link>Introduction to <application>Quickly</application> Part 1</link>"
msgstr ""

#. Tag: link
#: quickly-ubuntu-application-tutorial.xml:52
#, no-c-format
msgid "<link>Introduction to <application>Quickly</application> Part 2</link>"
msgstr ""

#. Tag: link
#: quickly-ubuntu-application-tutorial.xml:55
#, no-c-format
msgid "<link>Introduction to <application>Quickly</application> Part 3</link>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:61
#, no-c-format
msgid "<title>Introduction to <application>Quickly</application> Part 1</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:62
#, no-c-format
msgid "This part 1 of the <application>Quickly</application> tutorial. This part is will introduce some key <application>Quickly</application> commands, editing a user interface in Glade, and editing code in Gedit. This part of the tutorial will familiarize you with these three tools, and how they work together with python and pygtk so that you can <application>Quickly</application> build applications."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:64
#, no-c-format
msgid "Creating a <application>Quickly</application> Project"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:64
#, no-c-format
msgid "Creating an empty but working program couldn't be simpler. First, open a terminal window to type commands into. When it's open, type the command:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:65
#, no-c-format
msgid "<application>Quickly</application> create ubuntu-application jotty"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:69
#, no-c-format
msgid "This will create a jotty sub directory containing a complete directory tree and files for an empty python application. The command finishes by running the newly created empty application."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:73
#, no-c-format
msgid "Testing the Empty Application"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:73
#, no-c-format
msgid "They are populated and set up, and you can resize the window. Notice that <application>Quickly</application> inferred that the application title is \"Jotty\". Only a few of menu items do anything in the empty application, Help->About, Edit->Preferences, and File->Quit."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:77
#, no-c-format
msgid "Running the Application"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:77
#, no-c-format
msgid "Close the application by closing the window or using the Quit command. Since the empty application isn't installed into Ubuntu yet, you can't start the application from the application menu yet. To start the applicaton, use the terminal to first cd into the new subdirectory, and then use \"<application>Quickly</application> run\" to start the program."
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:79
#, no-c-format
msgid "cd jotty"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:80 quickly-ubuntu-application-tutorial.xml:180 quickly-ubuntu-application-tutorial.xml:901
#, no-c-format
msgid "<application>Quickly</application> run"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:84
#, no-c-format
msgid "Editing an Application"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:85
#, no-c-format
msgid "Edit the User Interface in Glade"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:85
#, no-c-format
msgid "<application>Quickly</application> programs use Glade to edit the user interface. Start Glade with <application>Quickly</application> in order to set up Glade for editing the empty applicaton. Don't start glade directly, or it won't load the necessary catalogue files for editing the classes that were automaticaly generated by <application>Quickly</application>."
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:87 quickly-ubuntu-application-tutorial.xml:142 quickly-ubuntu-application-tutorial.xml:307 quickly-ubuntu-application-tutorial.xml:388 quickly-ubuntu-application-tutorial.xml:722 quickly-ubuntu-application-tutorial.xml:750 quickly-ubuntu-application-tutorial.xml:788
#, no-c-format
msgid "<application>Quickly</application> glade"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:91
#, no-c-format
msgid "Glade will open with the project loaded up and ready to edit."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:95
#, no-c-format
msgid "Use the Project Menu to choose \"JottytWindow.ui\" for editing."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:99
#, no-c-format
msgid "We want to create a text area for typing into. There are some default Widgets added to the Window. We won't need these so we'll start with deleting them. Click on the label, and press delete, and it will disappear from the window."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:106
#, no-c-format
msgid "Do the same with the image widget. This leave us two free slots."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:110
#, no-c-format
msgid "We'll use the bottom slot to add a TextView widget for the user to type into. In the toolbox, click on the TextView widget. Then click in the empty slot."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:114
#, no-c-format
msgid "Make sure you save the file in Glade, or your changes won't take! Then run the application from terminal again. The window now has a place where the user can type."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:118
#, no-c-format
msgid "Now we'll add the entry field for the title, and also a label for it. We'll use the top empty slot for that. First, click on Horizontal Box (HBox) from the \"Containers\" section of the pallette, and then click on the top slot. A dialog box will open, tell it that you want two items."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:122
#, no-c-format
msgid "The HBox is a container that arranges it's children horizontally. Add a label to the empty left hand box, and a Text Entry to the right hand one."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:126
#, no-c-format
msgid "Before going on, let's clean up the UI just a tad here. Select the new HBox from the treeview in the inspector window. Then go to the Packing tab, and set Expand and Fill to \"No\"."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:130
#, no-c-format
msgid "Go to the General tab, and set spacing to 5."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:134
#, no-c-format
msgid "Select the label. On the general tab, set \"Label\" to \"Name:\". Set expand and fill to \"no\" for the label, but keep it \"yes\" for the entry. Set the padding for both to 5 (also on the Packing tab)."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:138
#, no-c-format
msgid "Add the Save, Open, and New Features"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:138
#, no-c-format
msgid "After the user types something, they may want to save it. A File->Save menu item was automatically created when the empty applicaton was created, but it's not hooked up to any code. To make Save work, we need tell the menu item what function to call, and then create a function to actually do the saving."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:140
#, no-c-format
msgid "Set the Signal Handler in Glade"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:140
#, no-c-format
msgid "To tell the menu item what function to call. If glade is not still open, open up the application in glade:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:143
#, no-c-format
msgid "Click on the file menu, and the menu opens as if the application were running."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:147
#, no-c-format
msgid "Choose the Save menu item, and it will be selected in Glade."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:151
#, no-c-format
msgid "Then choose the \"Signals\" tab of the properties window."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:155
#, no-c-format
msgid "In pygtk, menu items are \"activated\" when a user chooses the item from the menu. Since we want a function to run when the user chooses Save, we want to specify a function to respond to the activate signal from the menu item. We'll call the function \"save_file\". Simply type the function name into the box for the activate signal.Make sure to save the glade file."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:159
#, no-c-format
msgid "Note that you will need to setup the \"open_file\" signal and the \"new_file\" signal as well when you get to those functions later."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:160
#, no-c-format
msgid "Edit the Code in Gedit"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:161
#, no-c-format
msgid "Set Up Tabs Correctly"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:161
#, no-c-format
msgid "Note a major gotcha here. In python spaces and tabs are totally different, but they look just the same in an editor. So being indented one tab stop is not the same as being indented four spaces, even though they might look the same. And indentation level is very important in python. You will get a lot of errors if you mix tab indentation with space indentation. Your generated project follows the python standard of using four spaces for each indentation level. So you'll either have to hit the space bar four time every time you indent, or set up your editor to use the right number of spaces for tabs."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:163
#, no-c-format
msgid "The upshot is that you should take a moment to set up your Gedit (or whatever editor you are using) to use spaces for tabs. In Gedit, select Preferences from the Edit menu, and choose the Editor tab. Then set Tab width to 4, and turn on \"Insert spaces instead of tabs\". Your preferences should look like this:"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:167
#, no-c-format
msgid "Create the Save File Signal Handler"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:167
#, no-c-format
msgid "Now you're ready to write some code. Of course just telling the glade file what signal to emit won't make the file actually save, because we haven't created the \"save_file\" function yet. The code for JottyWindow is stored in the file jotty. jotty is a special python file that is the entry point for your application. Other python files in your application have the \".py\" suffix."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:169
#, no-c-format
msgid "Use the <application>Quickly</application> edit command to start editing your code files:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:170 quickly-ubuntu-application-tutorial.xml:725 quickly-ubuntu-application-tutorial.xml:754 quickly-ubuntu-application-tutorial.xml:778
#, no-c-format
msgid "<application>Quickly</application> edit"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:171
#, no-c-format
msgid "This will open the default Ubuntu text editor \"Gedit\" with any python files in the python directory."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:175
#, no-c-format
msgid "JottyWindow.ui is now expecting to find a function JottyWindow.save_file(), so we simply add one to the JottyWindow class in the jotty file right under the on_destroy funtion.:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:177
#, no-c-format
msgid ""
      "<code>def save_file(self, widget, data=None):\n"
      "        print \"save\"</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:178
#, no-c-format
msgid "This will print the word \"save\" to the terminal when run. The method signature is the standard signature expected in a signal handler. If you are new to python, be sure to copy the indentations exactly, as the indentation level is very important in python."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:179
#, no-c-format
msgid "Save the file, and run it again:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:183
#, no-c-format
msgid "Choose \"File->Save\" from the menu, and you'll see the word \"save\" printing out interminal. That's all there is to hookig up the functions!"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:187
#, no-c-format
msgid "Implementing Save"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:187
#, no-c-format
msgid "Now we'll write a little code in the signal handler to actually save the text. Because we want it to be easy for users to do things like syncronize their Jotty documents between computers, back it up, etc... we'll use couchdb as our backend, and we'll use desktopcouch for our api. Note that if you are not interested in learning about how to save to and read from couchdb, you can just snipe the code. Mostly likely you already have everything you need installed when you installed <application>Quickly</application>. But, you may need to install couchdb, desktopcouch, and the desktopcouch records api. The fastest way to do this is from the terminal:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:190
#, no-c-format
msgid "sudo apt-get install python-desktopcouch-records"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:193
#, no-c-format
msgid "This will install the api, and everything you need for the api to run. After desktopcouch is installed, you can write the code. The code will do the following:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:196
#, no-c-format
msgid "Import the stuff you'll need from desktopcouch."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:199
#, no-c-format
msgid "Get a reference to the couchdb database to save into."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:202
#, no-c-format
msgid "Get the title of the document and the text from the user interface."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:205
#, no-c-format
msgid "Check if there is already a document with the same title, and if so overwrite it."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:208
#, no-c-format
msgid "If there is not a document already, create one."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:211
#, no-c-format
msgid "Import the stuff you'll need from python-desktopcouch-records."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:211
#, no-c-format
msgid "Add these import statements along with the other imports to the top of the jotty file:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:213
#, no-c-format
msgid ""
      "<code>from desktopcouch.records.server import CouchDatabase\n"
      "from desktopcouch.records.record import Record</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:214
#, no-c-format
msgid "Get a Reference to the Database"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:214
#, no-c-format
msgid "Desktopcouch will set up a database for us, or create a new one if it's needed. We'll use \"jotty\" for the name of the database. Since we want this line to run every time the Jotty Window is created, put it at the end of the finish_initializing function:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:216
#, no-c-format
msgid "self.database = CouchDatabase(\"jotty\", create=True)"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:219
#, no-c-format
msgid "Now that we have an instance-wide reference to the database, we'll add code to the save_file function to run whenever the Save command is issued."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:220
#, no-c-format
msgid "Here's the code to pull the title out of the title entry:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:222
#, no-c-format
msgid ""
      "<code>#get the title for the note\n"
      "title = self.builder.get_object(\"entry1\").get_text()</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:223
#, no-c-format
msgid "Here's the code to get pull the text out of the TextView:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:223
#, no-c-format
msgid "In pygtk, TextView widgets have a text buffer that stores the text. So you ask the TextView for it's TextBuffer, and then you ask the TextBuffer for the text. You use iters to determine from which part of the text buffer you want text. Since we want all the text, it's easy to just get the start and end iters."
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:226
#, no-c-format
msgid ""
      "<code>#get the string\n"
      "buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "start_iter = buff.get_start_iter()\n"
      "end_iter = buff.get_end_iter()\n"
      "text = buff.get_text(start_iter,end_iter)\n"
      "</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:227
#, no-c-format
msgid "Saving a document to Couchdb"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:227
#, no-c-format
msgid "A record in couch is essentially a python dictionary with some extra key/value pairs to make the database work. So we can save the document to couch like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:230
#, no-c-format
msgid ""
      "<code>record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\"\n"
      "new_rec = Record({\"record_type\": record_type,\"title\":title, \"text\":text})\n"
      "self.database.put(new_rec)</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:231
#, no-c-format
msgid "The \"record_type\" field is not strictly required, but among other things, it makes it easy to fetch the documents later. By convention, we use a url to specify the record type. This provides a place for other developers to go to read about the record type. The description only needs to be human readable. Couchdb is not a typed database, so don't expect that the url will have any kind of schema definition or anything. You can use whatever url you want, and put whatever you want at that URL."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:232
#, no-c-format
msgid "Check for a pre-existing note with the same title"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:232
#, no-c-format
msgid "Before we just write the new document though, we have to take note of the fact that couch will allow you to create as many documents as you want with the same title. We probably don't want this, so we we'll have to write a little code to check if there is already a document in couch with the same title, and if there is, update that document rather than create a new one."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:234
#, no-c-format
msgid "In CouchDB, you don't do a lot of data processing in the database like you would with a relational database. To be most efficient, we could use the desktopcouch API to create a view in CouchDB, but it's probably simplest just to do the necessary processing on the client for now. To do this, we'll use a desktopcouch function to retrieve all of the records of a specified record type."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:235
#, no-c-format
msgid "To find and update documents with a matching title we will:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:238 quickly-ubuntu-application-tutorial.xml:269
#, no-c-format
msgid "Retrieve all of the documents with the CouchDatabase.get_records function."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:241 quickly-ubuntu-application-tutorial.xml:272
#, no-c-format
msgid "Check each of the returned records for a matching title."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:244
#, no-c-format
msgid "If there is a match, update the record using the CouchDatabase.update_fields function and return."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:247
#, no-c-format
msgid "This all may sound very weird, but in code, it's not quite so complicated:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:249
#, no-c-format
msgid ""
      "<code>#get all the records\n"
      "record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\"\n"
      "results = self.database.get_records(record_type = record_type,create_view = True)\n"
      "#update a record that has the same title\n"
      "for result in results:\n"
      "    document = result.value\n"
      "    if document[\"title\"] == title:\n"
      "        key = document[\"_id\"]\n"
      "        self.database.update_fields(key, {\"text\":text})\n"
      "           return</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:250
#, no-c-format
msgid "So the whole function should look like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:252
#, no-c-format
msgid ""
      "<code>def save_file(self, widget, data=None): \n"
      "#get the title for the note \n"
      "    title = self.builder.get_object(\"entry1\").get_text() \n"
      "#get the text to save \n"
      "    buff = self.builder.get_object(\"textview1\").get_buffer() \n"
      "    start_iter = buff.get_start_iter() \n"
      "    end_iter = buff.get_end_iter() \n"
      "    text = buff.get_text(start_iter,end_iter) \n"
      "#get all the records \n"
      "    record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\" \n"
      "    results = self.database.get_records(record_type = record_type,create_view = True) \n"
      "#update a record that has the same title \n"
      "    for result in results: \n"
      "        document = result.value \n"
      "        if document[\"title\"] == title: \n"
      "            key = result.key \n"
      "            self.database.update_fields(key, {\"text\":text}) \n"
      "           return \n"
      "#if no records had the title, create it \n"
      "    new_rec = Record({\"record_type\":record_type,\"title\":title, \"text\":text})\n"
      "    self.database.put_record(new_rec)</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:254
#, no-c-format
msgid "Couchdb makes it really easy to see if your save function is working. You can just point your web browser at it and explore the database:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:255
#, no-c-format
msgid "file:///home/your_user_name>/.local/share/desktop-couch/couchdb.html"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:259
#, no-c-format
msgid "If you are redirected to a page that doesn't work, you probably just need to clear your browser cache and try again."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:260
#, no-c-format
msgid "Implementing Open and New"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:260
#, no-c-format
msgid "To open a saved document, the user will type the title of the document that they want to open in the text entry, and choose \"Open\" from the main menu. If there is no matching document there, it will just clear out the text view, ready for input. This is probably not too intuitive, so we'll add a dialog box for prompting the user for the title, but that's for later in the tutorial. For now, we'll just use the same text entry field."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:262
#, no-c-format
msgid "Implementing Open is essentially the reverse of Save:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:262
#, no-c-format
msgid "Follow these steps:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:266
#, no-c-format
msgid "Add the open_file signal to the menu item in Glade."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:275
#, no-c-format
msgid "If there is a match, pull out the text and display it in the text view."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:278
#, no-c-format
msgid "So the open_file function looks like so:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:280
#, no-c-format
msgid ""
      "<code>def open_file(self, widget, data=None):\n"
      "        #get the name of the document to open\n"
      "        title = self.builder.get_object(\"entry1\").get_text()\n"
      "        text = \"\"\n"
      " \n"
      "        #get all the records\n"
      "        record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\"\n"
      "        results = self.database.get_records(record_type = record_type,create_view = True)\n"
      " \n"
      "        #get the text if there is a matching title\n"
      "        for result in results:\n"
      "            document = result.value\n"
      "            if document[\"title\"] == title:\n"
      "                text = document[\"text\"]\n"
      "        \n"
      "        #set the UI to display the string\n"
      "        buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "        buff.set_text(text)</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:281
#, no-c-format
msgid "Implement New"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:281
#, no-c-format
msgid "First, add the new_file signal to the menu item in Glade, then add this code to clear out the text:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:284
#, no-c-format
msgid ""
      "<code>def new_file(self, widget, data=None):\n"
      "        self.builder.get_object(\"entry1\").set_text(\"Note Title\")\n"
      "        buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "        buff.set_text(\"\")</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:285
#, no-c-format
msgid "To make them work, add these functions to the JottyWindow class, and save. Then go back and connect the functions to the activate signals for the Open and New menu items."
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:286
#, no-c-format
msgid "Complete jotty file"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:287
#, no-c-format
msgid "Saving Your Work"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:287
#, no-c-format
msgid "When <application>Quickly</application> created your application, it automatically added it to Bazaar, a source code versioning system. You can use Bazaar to roll back mistake, see code history, compare versions, etc... <application>Quickly</application> has a convenience function for backing up your work:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:289
#, no-c-format
msgid "<application>Quickly</application> save \"First working version of Jotty\""
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:292
#, no-c-format
msgid "This will call <code>bzr add</code> and then <code>bzr commit -m [your message]</code> for you."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:295
#, no-c-format
msgid "<title>Introduction to <application>Quickly</application> Part 2</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:296
#, no-c-format
msgid "In part 1, we created an application that can read and write text files, and persist them in the couchdb backend. However, the application has a hideous usability flaw, in the text box for specifying titles when saving and opening files is very confusing. In part 2, we'll fix thay by adding a save and an open dialog."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:298
#, no-c-format
msgid "Creating a <application>Quickly</application> Dialog"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:299
#, no-c-format
msgid "Creating the Empty Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:299
#, no-c-format
msgid "It's simple to add an empty, but working dialog to your project. Simply specify the name of the new dialog, and it will be added automatically. Assuming that you are in the jotty project directory:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:301
#, no-c-format
msgid "<application>Quickly</application> dialog save"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:304
#, no-c-format
msgid "This will add the dialog to your project."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:305 quickly-ubuntu-application-tutorial.xml:386
#, no-c-format
msgid "Editing the New Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:305
#, no-c-format
msgid "To edit the UI for the dialog, you'll need to load it into Glade again. If you already have an instance of glade running, you might want to go ahead and close it first, as it may get confusing if you have more than one open at a time. After closing glade, simply open it again:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:310
#, no-c-format
msgid "Then use the project menu to switch to newly created SaveDialog.ui file."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:314
#, no-c-format
msgid "Then add some widgets for the UI. Start with a Vertical Box (VBox) with two items. Put label in the top, and an HBox in the bottom slot. In the HBox, add a label and an edit widget, just like you did for JottyWindow in part 1. Set the padding and expand properties as well."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:318
#, no-c-format
msgid "Code the Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:318
#, no-c-format
msgid "You can use the \"<application>Quickly</application> edit\" command to open the SaveDialoy.py file. This dialog needs very little additional code to work. Essentially, you just need a way to retrieve the string specified by the user. We'll add a qiuck accessor method for this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:321
#, no-c-format
msgid ""
      "<code>@property\n"
      "    def title_text(self):\n"
      "        return self.builder.get_object(\"entry1\").get_text()</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:322
#, no-c-format
msgid "We don't need to write any code for the Ok and Cancel buttons, as they were automatically hooked up by <application>Quickly</application> when it created the dialog."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:323
#, no-c-format
msgid "Before we go on to invoking the dialog, delete HBox from JottyWindow that holds the text entry and label, as we won't be needing those."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:327
#, no-c-format
msgid "Calling the Save Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:327
#, no-c-format
msgid "To use the dialog in JottyWindow, we need to follow these steps:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:331
#, no-c-format
msgid "Import SaveDialog in JottyWindow"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:334
#, no-c-format
msgid "In the save_file function, create an instance of SaveDialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:337 quickly-ubuntu-application-tutorial.xml:453
#, no-c-format
msgid "Run the Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:340
#, no-c-format
msgid "Get the String"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:343 quickly-ubuntu-application-tutorial.xml:459
#, no-c-format
msgid "Destroy the dialog"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:347
#, no-c-format
msgid "Importing the SaveDialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:347
#, no-c-format
msgid "Add the SaveDialog to the list of imported modules at the top of the, so it looks like this:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:349
#, no-c-format
msgid "from jotty import AboutJottyDialog, PreferencesJottyDialog, SaveDialog"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:353 quickly-ubuntu-application-tutorial.xml:478
#, no-c-format
msgid "Create an instance of the dialog and run it"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:353
#, no-c-format
msgid "When the user chooses Save, we want to open the SaveDialog and collect the title of the note from the user. So we need to modify our save_file function."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:356
#, no-c-format
msgid "To create an instance of the dialog, use the NewSaveDialog() function in the SaveDialog module. It's important that you don't create an instance of SaveDialog directly, as it won't have a chance to load up it's UI that way, and it won't work. So whenever you use a <application>Quickly</application> dialog, do it like this:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:357
#, no-c-format
msgid "saver = SaveDialog.NewSaveDialog()"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:360
#, no-c-format
msgid "To make the dialog appear, simply use the run() method. However, we want to check the result, so we'll need to store that in a variable. After it runs, we want to collect the string from the user, like this:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:361
#, no-c-format
msgid "result = saver.run() title = saver.title_text"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:365
#, no-c-format
msgid "Clean up the dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:365
#, no-c-format
msgid "We need to tell the dialog to not show itself anymore. We could call saver.hide() to make it hide, but since we don't need it hanging around, we'll just destroy it. Before we go on, though, we need to ensure that the user actually wants to save, so if we didn't get the Ok result, we should just return out of the function:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:368
#, no-c-format
msgid ""
      "<code>saver.destroy()\n"
      "        if result != gtk.RESPONSE_OK:\n"
      "            return</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:370
#, no-c-format
msgid "Since we're now getting the title from the dialog instead of the text entry, we should delete the line of the code that sents it from entry1. So except for the addition of the dialog code, the save_file function looks pretty much the same as it did in part 1:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:373
#, no-c-format
msgid ""
      "<code>def save_file(self, widget, data=None):\n"
      "        #get the titel from the user\n"
      "        saver = SaveDialog.NewSaveDialog()\n"
      "        result = saver.run()\n"
      "        title = saver.title_text\n"
      "\n"
      "        saver.destroy()\n"
      "        if result != gtk.RESPONSE_OK:\n"
      "            return\n"
      "\n"
      "        #get the text to save\n"
      "        buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "        start_iter = buff.get_start_iter()\n"
      "        end_iter = buff.get_end_iter()\n"
      "        text = buff.get_text(start_iter,end_iter)\n"
      "\n"
      "        #get all the records\n"
      "        record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\"\n"
      "        results = self.database.get_records(record_type = record_type,create_view = True)\n"
      "\n"
      "        #update a record that has the same title\n"
      "        for result in results:\n"
      "            record = result.value\n"
      "            if record[\"title\"] == title:\n"
      "                key = result.key\n"
      "                self.database.update_fields(key, {\"text\":text})\n"
      "                return\n"
      "        \n"
      "        #if no records had the title, create it  \n"
      "        new_rec = Record({\"record_type\":record_type,\"title\":title, \"text\":text})\n"
      "        self.database.put_record(new_rec)</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:374
#, no-c-format
msgid "Now when we choose save, we get the SaveDialog instead:"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:379
#, no-c-format
msgid "Creating a Dialog with a CouchGrid"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:379
#, no-c-format
msgid "We'll use a similar approach in the Open dialog that we did with Save. However, there is one big difference, we want to provide the user with a list of documents that you could choose to open. We'll use a widget called CouchGrid, which is included in the desktopcouch api for this."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:382
#, no-c-format
msgid "Create the Open Dialog"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:383
#, no-c-format
msgid "<application>Quickly</application> dialog open"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:386
#, no-c-format
msgid "Start out by closing, and then reopening glade again:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:391
#, no-c-format
msgid "Start by adding an HBox and label in the sammer manner as in the Save Dialog above. Leave an empty space in the HBox. We will use code to put the CouchGrid there."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:395
#, no-c-format
msgid "Coding the Open Dialog"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:396
#, no-c-format
msgid "Creating and Adding a CouchGrid"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:396
#, no-c-format
msgid "It just takes a little bit of code to add a CouchGrid to the dialog. We need to:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:400
#, no-c-format
msgid "Import the CouchGrid class."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:403
#, no-c-format
msgid "Create a CouchGrid pointing at the jotty database, and the desired record type."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:406
#, no-c-format
msgid "Add the CouchGrid to the dialog."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:410
#, no-c-format
msgid "Import the CouchGrid class"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:410
#, no-c-format
msgid "CouchGrid is part of the desktopcouch records api, so we import it like this:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:412
#, no-c-format
msgid "from desktopcouch.records.couchgrid import CouchGrid"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:415
#, no-c-format
msgid "Create the CouchGrid"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:415
#, no-c-format
msgid "A CouchGrid needs to know three things, the name of the database, the name of the record type to, and the name of the keys to use. \"keys\" is a list of fields that the widget will display, and by default will also use the same text for the heading of any columns. This set up should be done in the OpenDialog's finish_initalizing function. All this is easily done in code like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:418
#, no-c-format
msgid ""
      "<code>database = \"jotty\"\n"
      "        keys = [\"title\"]\n"
      "        record_type = \"http://wiki.ubuntu.com/<application>Quickly</application>/JottyDoc\"\n"
      "        self.couchgrid = CouchGrid(database, record_type=record_type,keys=keys)</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:419
#, no-c-format
msgid "Add the CouchGrid to the Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:419
#, no-c-format
msgid "When we added the HBox to the dialog, we left an open space at the bottom. We'll use this by \"packing\" the CouchGrid into the HBox. We need to show it as well. So add the following lines to the finish_initializing function as well:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:422
#, no-c-format
msgid ""
      "<code>self.couchgrid.show()\n"
      "        self.builder.get_object(\"vbox1\").pack_end(self.couchgrid)</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:424
#, no-c-format
msgid "Create the get_selection function"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:424
#, no-c-format
msgid "The dialog still needs a bit more code to work. It needs to return the user's selection, if there is one. To do this, we need to ask the CouchGrid what is selected. This is easy using the widgets selected_record_ids function. But the CouchGrid supports multiple selection, so we'll do the following:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:428
#, no-c-format
msgid "Use a decorator to define the function as a property accessor."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:431
#, no-c-format
msgid "Get all the selected record ids."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:434
#, no-c-format
msgid "If none are selected, return None."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:437
#, no-c-format
msgid "Pick the first one and return it."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:440
#, no-c-format
msgid "So the function to add to OpenDialog looks like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:442
#, no-c-format
msgid ""
      "<code>@property\n"
      "    def selected_record_id(self):\n"
      "        ids = self.couchgrid.selected_record_ids\n"
      "        if len(ids) &#60; 1:\n"
      "            return None\n"
      "        else:\n"
      "            return ids[0]</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:443
#, no-c-format
msgid "Using the Open Dialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:443
#, no-c-format
msgid "Now we want to use the Open Dialog in the JottyWindow open_file function. To use it,we'll follow these steps:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:447
#, no-c-format
msgid "Import OpenDialog in JottyWindow"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:450
#, no-c-format
msgid "In the open_file function, create an instance of OpenDialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:456
#, no-c-format
msgid "Get the id for the selected title."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:462
#, no-c-format
msgid "Check the response before proceeding"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:465
#, no-c-format
msgid "<para>Use the id to get the record from CouchDB</para>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:468
#, no-c-format
msgid "<para>Update the UI</para>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:472
#, no-c-format
msgid "Import OpenDialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:472
#, no-c-format
msgid "Just like the SaveDialog, add the import line to the list of imports:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:474
#, no-c-format
msgid "from jotty import AboutJottyDialog, PreferencesJottyDialog, SaveDialog, OpenDialog"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:478
#, no-c-format
msgid "So now we're ready to call the dialog from the JottyWindow's open_file function. Creating the OpenDialog is exactly the same as creating the SaveDialog, except we also want to tell it to load the titles before we run it:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:481
#, no-c-format
msgid ""
      "<code>opener = OpenDialog.NewOpenDialog()\n"
      "        result = opener.run()</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:483
#, no-c-format
msgid "Get the id for the selected title"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:483
#, no-c-format
msgid "Now use the property that we created to retrieve the title and text from the dialog. Don't forget to check the response type before going on."
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:486
#, no-c-format
msgid ""
      "<code>rec_id = opener.selected_record_id\n"
      "\n"
      "        #close the dialog, and check whether to proceed\n"
      "        opener.destroy()\n"
      "        if result != gtk.RESPONSE_OK:\n"
      "            return</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:489
#, no-c-format
msgid "<title>Use the id to get the record from CouchDB</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:489
#, no-c-format
msgid "If nothing was selected, we'll just return. Otherwise, we'll retrieve the record from CouchDB and pull out the text for the document:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:492
#, no-c-format
msgid ""
      "<code>#get the record from CouchDB and extract the text\n"
      "        if rec_id == None:\n"
      "            return\n"
      "        record = self.database.get_record(rec_id)\n"
      "        text = record[\"text\"]</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:494
#, no-c-format
msgid "<title>Update the UI</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:494
#, no-c-format
msgid "Now just put the text into the texview:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:497
#, no-c-format
msgid ""
      "<code>#set the UI to display the string\n"
      "        buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "        buff.set_text(text)</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:498
#, no-c-format
msgid "That's all there is to it. So the whole open_file function looks like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:500
#, no-c-format
msgid ""
      "<code>def open_file(self, widget, data=None):\n"
      "        #run the open dialog\n"
      "        opener = OpenDialog.NewOpenDialog()\n"
      "        result = opener.run()\n"
      "\n"
      "        #get the record id from the dialog\n"
      "        rec_id = opener.selected_record_id\n"
      "\n"
      "        #close the dialog, and check whether to proceed\n"
      "        opener.destroy()\n"
      "        if result != gtk.RESPONSE_OK:\n"
      "            return\n"
      "\n"
      "        #get the record from CouchDB and extract the text\n"
      "        if rec_id == None:\n"
      "            return\n"
      "        record = self.database.get_record(rec_id)\n"
      "        text = record[\"text\"]\n"
      "\n"
      "        #set the UI to display the string\n"
      "        buff = self.builder.get_object(\"textview1\").get_buffer()\n"
      "        buff.set_text(text)</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:501
#, no-c-format
msgid "Now users get a nice open dialog:"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:506
#, no-c-format
msgid "Finishing the Application"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:506
#, no-c-format
msgid "Now opening a saved document is much more intuitive."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:512
#, no-c-format
msgid "However, the application is not complete. There are a few things left for you to do:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:515
#, no-c-format
msgid "Set the title of the JottyWindow to display the note title. Try self.set_text(title)."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:518
#, no-c-format
msgid "The Save command works more like \"Save As\". The application probably shouldn't pop up a SaveDialog every time you want to save. If it's already been saved, you probably just want to save it, but use a SaveDialog when the user choose Save As, or is saving a document for the first time."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:521
#, no-c-format
msgid "The OpenDialog should probably return when the user double clicks on an item in the list. Try connecting to the \"select-cursor-row\" signal on the TreeView, and calling self.response(gtk.RESPONSE_OK) in the handler."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:524
#, no-c-format
msgid "Perhaps the Ok button in the OpenDialog should be disabled if nothing is selected. Try setting the \"sensitivity\" in Glade, and the set_sensitive function for the Ok button."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:527
#, no-c-format
msgid "It would be more consistent for the Open and Close dialogs to have \"Open\" and \"Close\" for buttons instead of \"Ok\". You can set a different type in the properties window in Glade."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:530
#, no-c-format
msgid "Loading every document into the open dialog is probably a bit inefficient. Perhaps storing the document id and using that to retrieve the document would be a better implementation."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:536
#, no-c-format
msgid "<title>Introduction to <application>Quickly</application> Part 3</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:537
#, no-c-format
msgid "In parts 1 and 2, we showed how to create a simple Ubuntu application using <application>Quickly</application>. This section will cover how to package an application so that it is easy for you to share, and easy for other people to install."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:538
#, no-c-format
msgid "License your Application"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:538
#, no-c-format
msgid "It's important to license your code so users and other programmers know their rights in terms of redistributing or modifying it. To <application>Quickly</application> grant a GPL license to your code, simply:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:542
#, no-c-format
msgid "Specify your name and email address in the Copyright file."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:545
#, no-c-format
msgid "Run the \"license\" command."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:549
#, no-c-format
msgid "Specify your name and email"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:549
#, no-c-format
msgid "When <application>Quickly</application> created your ubuntu application, it added a file named Copyright in the top level of the directory. Open this file in your text editor, and modify the top line so it has your name and email included. Be sure not to modify other lines as it will interfere with the next step. For example, I would change the entire file to look like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:552
#, no-c-format
msgid ""
      "<code># Copyright (C) 2009 Rick Spencer rick.spencer@canonical.com\n"
      "### BEGIN AUTOMATIC LICENSE GENERATION\n"
      "### END AUTOMATIC LICENSE GENERATION\n"
      "</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:553
#, no-c-format
msgid "Run the \"License\" Command"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:553
#, no-c-format
msgid "By default, <application>Quickly</application> will use a GPL 3 license for your project. To use this license, use this command:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:555 quickly-ubuntu-application-tutorial.xml:575
#, no-c-format
msgid "<application>Quickly</application> license"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:558
#, no-c-format
msgid "This will add the GPL 3 license to all of your code files that you've added to your project using <application>Quickly</application>."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:559
#, no-c-format
msgid "Keep in mind a couple of things:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:562
#, no-c-format
msgid "This is a one way trip. Once you license the project, changes to the license must be done manually."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:565
#, no-c-format
msgid "If you prefer a GPL 2 license, you can specify that when you issue the license command:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:566
#, no-c-format
msgid "<application>Quickly</application> license GPL-2"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:571
#, no-c-format
msgid "<application>Quickly</application> doesn't care what license you use, but only knows natively what files and headers to include for BSD, GPL-2, GPL-3, LGPL-2 and LGPL-3. If you prefer another license, you can simply add whatever you license you like by adding your own license in the Copyright file:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:573
#, no-c-format
msgid ""
      "<code>### BEGIN AUTOMATIC LICENSE GENERATION\n"
      "# My personal license here\n"
      "### END AUTOMATIC LICENSE GENERATION</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:574
#, no-c-format
msgid "and then run:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:578
#, no-c-format
msgid "to license every files."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:581
#, no-c-format
msgid "If you've added code files or other files to your project manually, you will need to add the license to those files manually or add those tags at the beginning of the file:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:583
#, no-c-format
msgid ""
      "<code>### BEGIN LICENSE\n"
      "### END LICENSE</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:587
#, no-c-format
msgid "Translate Your Application"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:587
#, no-c-format
msgid "To allow for users from other countries to use your application you may want to translate it. Glade automatically creates a pot file for you but to translate strings in your code you have to:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:589
#, no-c-format
msgid "import gettext"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:590
#, no-c-format
msgid "gettext.gettext(\"What you want translated\")"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:592
#, no-c-format
msgid "Specify Application Settings"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:592
#, no-c-format
msgid "You should personalize your application a little before creating the archive. This is very easy to do, as all of the files that you need have already been created, and only need a few lines changed to make them your own. To do this you should:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:596
#, no-c-format
msgid "Personalize the Application Icon"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:597
#, no-c-format
msgid "<para>Edit the Desktop File</para>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:598
#, no-c-format
msgid "Edit the setup.py File"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:601
#, no-c-format
msgid "Personalize your Application Icon"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:601
#, no-c-format
msgid "When users install your application, Ubuntu will display an icon next to it in the menus. You can create your own icon or edit the file called \"icon.png\" in the media directory (jotty/data/media). Ubuntu comes with a great image editing program called \"Gimp.\" So you can go:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:603
#, no-c-format
msgid "gimp data/media/icon.png"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:609
#, no-c-format
msgid "If you don't personalize the icon, it's ok, your app will just have the default icon, such as in the image below."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:611
#, no-c-format
msgid "<title>Edit the Desktop File</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:611
#, no-c-format
msgid "By default, <application>Quickly</application> Ubuntu applications are classified as \"utilities\", so they show up under the Accessories menu in Ubuntu. If we wanted to make Jotty show up in another category, we can do this by editing the desktop file. A desktop file is a file that describes your application to a Linux desktop. The file \"jottydesktop.in\" was automatically created in the jotty project directory. To change Jotty from a Utility to an Office application, edit jotty.desktop.in and change this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:615
#, no-c-format
msgid ""
      "<code>[Desktop Entry]\n"
      "Name=Jotty\n"
      "Comment=Jotty application\n"
      "Categories=GNOME;Utility;\n"
      "Exec=jotty\n"
      "Icon=jotty\n"
      "Terminal=false\n"
      "Type=Application\n"
      "</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:617
#, no-c-format
msgid "to this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:621
#, no-c-format
msgid ""
      "<code>[Desktop Entry]\n"
      "Name=Jotty\n"
      "Comment=Jotty application\n"
      "Categories=GNOME;Office;\n"
      "Exec=jotty\n"
      "Icon=jotty\n"
      "Terminal=false\n"
      "Type=Application</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:622
#, no-c-format
msgid "There are lots more categories that you can use, all defined by the FreeDesktop spec. You can see the complete list in the <ulink url=\"http://standards.freedesktop.org/menu-spec/latest/apa.html\">menu spec</ulink>."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:626
#, no-c-format
msgid "Edit Setup.py"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:626
#, no-c-format
msgid "Finally, you should include some information in the setup.py file to tell your users a little about yourself. The setup.py file was created for you, just like the desktop file. Most of of the setup.py file shouldn't be modified, as it is just boiler plate that makes your application work properly after it has been installed. However, there is a section at the bottom of the setup.py file that you should edit to describe yourself and the application."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:629
#, no-c-format
msgid "So I would change this section:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:633
#, no-c-format
msgid ""
      "<code>DistUtilsExtra.auto.setup(\n"
      "    name='jotty',\n"
      "    version='0.1',\n"
      "    license='GPL v3',\n"
      "    #author='Your Name',\n"
      "    #author_email='email@ubuntu.com',\n"
      "    #description='UI for managing …',\n"
      "    #long_description='Here a longer description',\n"
      "    #url='https://launchpad.net/jotty',\n"
      "    cmdclass={'install': InstallAndUpdateDataDirectory}\n"
      "    )\n"
      "</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:634
#, no-c-format
msgid "To look like this:"
msgstr ""

#. Tag: literallayout
#: quickly-ubuntu-application-tutorial.xml:638
#, no-c-format
msgid ""
      "<code>DistUtilsExtra.auto.setup(\n"
      "    name='jotty',\n"
      "    version='0.1',\n"
      "    license='GPL v3',\n"
      "    author='Rick Spencer',\n"
      "    author_email='rick.spencer@canonical.com',\n"
      "    description='Note taking application',\n"
      "    long_description='Note taking application that uses CouchDB as the backend to support easy replication across users and computers.',\n"
      "    #url='https://launchpad.net/jotty',\n"
      "    cmdclass={'install': InstallAndUpdateDataDirectory}\n"
      "    )</code>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:639
#, no-c-format
msgid "Note that the license has already been set up for you. author and author_email are updated each time you connect to Launchpad (with <application>Quickly</application> release or <application>Quickly</application> share) with your Launchpad real name and preferred email adress."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:640
#, no-c-format
msgid "Notice that Jotty doesn't have a web page yet, so I just left that line commented out. Also, you don't have to increment version number as <application>Quickly</application> share and <application>Quickly</application> release commands will make it for you.."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:644
#, no-c-format
msgid "Create and Test the Debian Archive"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:644
#, no-c-format
msgid "After personalizing the project, we are now ready to create the package. This is easily done by issuing the package command:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:647 quickly-ubuntu-application-tutorial.xml:849
#, no-c-format
msgid "<application>Quickly</application> package"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:650
#, no-c-format
msgid "This command will take a little while to discover dependencies and create all the required archives, etc... It will also report some errors as we haven't created a PGP key, for instance. None the less, when it is done, the package will be created. Using the file browser, you can see the created package next to the project directory:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:654
#, no-c-format
msgid "Right now, the specific file we are interested in is \"jotty_0.1_all.deb\". To test it out, double click on it, to open it in Ubuntu's graphical installer program:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:658
#, no-c-format
msgid "Click \"Install Package\" to see how it installs onto your desktop. After chugging for a bit, you'll see that it is installed in the Applications->Office menu. If you customized your icon, you'll see that the menu uses your custom icon as well."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:662
#, no-c-format
msgid "Now that you have a package"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:662
#, no-c-format
msgid "Now that you've packaged your application, you can share the .deb file. However, if your users install their application this way, and you update the application, your users will have to find this out and resinstall. This hassle can be avoided in Ubuntu by using Personal Package Archives (or PPAs). Distrubuting your applications in this manner is covered in section 4 (not yet available)."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:666
#, no-c-format
msgid "<title><application>Quickly</application>: <application>Quickly</application> Command Reference</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:667
#, no-c-format
msgid "The ubuntu-application template template contains the following commands."
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:669
#, no-c-format
msgid "<listitem>create</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:672
#, no-c-format
msgid "<listitem>dialog</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:675
#, no-c-format
msgid "<listitem>edit</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:678
#, no-c-format
msgid "<listitem>glade</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:681
#, no-c-format
msgid "<listitem>help</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:684
#, no-c-format
msgid "<listitem>license</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:687
#, no-c-format
msgid "<listitem>package</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:690
#, no-c-format
msgid "<listitem>release</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:693
#, no-c-format
msgid "<listitem>run</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:696
#, no-c-format
msgid "<listitem>save</listitem>"
msgstr ""

#. Tag: listitem
#: quickly-ubuntu-application-tutorial.xml:699
#, no-c-format
msgid "<listitem>share</listitem>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:703 quickly-ubuntu-application-tutorial.xml:704
#, no-c-format
msgid "<title>create</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:704 quickly-ubuntu-application-tutorial.xml:731 quickly-ubuntu-application-tutorial.xml:776 quickly-ubuntu-application-tutorial.xml:787 quickly-ubuntu-application-tutorial.xml:800 quickly-ubuntu-application-tutorial.xml:809 quickly-ubuntu-application-tutorial.xml:848 quickly-ubuntu-application-tutorial.xml:865 quickly-ubuntu-application-tutorial.xml:900 quickly-ubuntu-application-tutorial.xml:910 quickly-ubuntu-application-tutorial.xml:926
#, no-c-format
msgid "Usage:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:706
#, no-c-format
msgid "<application>Quickly</application> create ubuntu-application path/to/project_name"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:708
#, no-c-format
msgid "where \"project_name\" is one or more words separated by an underscore and path/to can be any existing path."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:711
#, no-c-format
msgid "This will create and run a new project, including Python code, Glade files, and packaging files to make the project work. After creating the project, get started by:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:717
#, no-c-format
msgid "Changing your working directory to the new project:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:719
#, no-c-format
msgid "cd path/to/project_name"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:721
#, no-c-format
msgid "Edit the UI with Glade:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:724
#, no-c-format
msgid "Edit the Python code:"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:730 quickly-ubuntu-application-tutorial.xml:731
#, no-c-format
msgid "<title>dialog</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:733
#, no-c-format
msgid "<application>Quickly</application> dialog dialog_name"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:734
#, no-c-format
msgid "where dialog_name is one or more words seperated with underscore"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:735
#, no-c-format
msgid "This will create:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:739
#, no-c-format
msgid "A subclass of gtk.Dialog called DialogNameDialog in the module DialogNameDialog.py"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:742
#, no-c-format
msgid "A glade file called DialogNameDialog.ui in the ui directory"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:745
#, no-c-format
msgid "A catalog file called dialog_name_dialog.xml also in the ui directory"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:748
#, no-c-format
msgid "To edit the UI for the dialog, run:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:752
#, no-c-format
msgid "To edit the behavior, run:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:755
#, no-c-format
msgid "To use the dialog you have to invoke it from another python file:"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:759
#, no-c-format
msgid "Import the dialog import DialogNameDialog"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:763
#, no-c-format
msgid "Create an instance of the dialog dialog = DialogNameDialog.NewDialogNameDialog()"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:767
#, no-c-format
msgid "Run the dialog and hide the dialog result = dialog.run() dialog.hide()"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:775 quickly-ubuntu-application-tutorial.xml:776
#, no-c-format
msgid "<title>edit</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:780
#, no-c-format
msgid "A convenience command to open all of your python files in your project directory in your default editor, ready for editing."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:786 quickly-ubuntu-application-tutorial.xml:787
#, no-c-format
msgid "<title>glade</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:790
#, no-c-format
msgid "Opens Glade UI editor so that you can edit the UI for dialogs and windows in your project. Note that you *must* open Glade in this manner for <application>Quickly</application> to work. If you try to open Glade directly, and the open the UI files, Glade will throw errors and won't open the files."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:799 quickly-ubuntu-application-tutorial.xml:800
#, no-c-format
msgid "<title>help</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:801
#, no-c-format
msgid "<application>Quickly</application> help"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:803
#, no-c-format
msgid "Opens a web browser with the help index."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:808 quickly-ubuntu-application-tutorial.xml:809
#, no-c-format
msgid "<title>license</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:810
#, no-c-format
msgid "<application>Quickly</application> license &#60;Your_Licence&#61;"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:812
#, no-c-format
msgid "Adds license to project files. Before using this command, you should:"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:816
#, no-c-format
msgid "run <application>Quickly</application> save in case something goes wrong"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:819
#, no-c-format
msgid "Edit the file Copyright to include your authorship."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:821
#, no-c-format
msgid "If you want to put your own <application>Quickly</application> unsupported Licence, remove and replace the tags ### BEGIN AUTOMATIC LICENCE GENERATION and ### END AUTOMATIC LICENCE GENERATION in it by your own licence."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:825
#, no-c-format
msgid "Executes either <code><application>Quickly</application> license</code> or <code><application>Quickly</application> licence &#60;License&#61;</code> where &#60;License&#61; can be either: - GPL-3 (default) - GPL-2"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:832
#, no-c-format
msgid "This will modify the Copyright file with the chosen licence (with GPL-3 by default). Updating previous chosen Licence if needed. If you previously removed the tags to add your own licence, it will leave it pristine. If no name is attributed to the Copyright, it will try to retrieve it from Launchpad (in <application>Quickly</application> release or <application>Quickly</application> share command only)"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:838
#, no-c-format
msgid "Finally, this will copy the Copyright at the head of every files."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:840
#, no-c-format
msgid "Note that if you don't run <application>Quickly</application> licence before calling <application>Quickly</application> release or <application>Quickly</application> share, this one will execute it for you and guess the copyright holder from your launchpad account if you didn't update it."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:847 quickly-ubuntu-application-tutorial.xml:848
#, no-c-format
msgid "<title>package</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:851
#, no-c-format
msgid "Creates a debian file (deb) from your project. Before running the package command you can edit the Icon and Category entry of *.desktop.in file, where * is the name of your project."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:855
#, no-c-format
msgid "Note that if you didn't run <application>Quickly</application> release, <application>Quickly</application> share or <application>Quickly</application> change-lp-project you may miss the name, email in setup.py. You can edit them if you don't want to use any of these commands afterwards. Those changes are not a mandatory at all for testing purpose."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:864 quickly-ubuntu-application-tutorial.xml:865
#, no-c-format
msgid "<title>release</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:866
#, no-c-format
msgid "<application>Quickly</application> release"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:868
#, no-c-format
msgid "Posts a release of your project to a PPA on launchpad so that users can install the application on their system."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:871
#, no-c-format
msgid "You can also execute: <code><application>Quickly</application> release &#60;release_number&#61;</code> of you don't want to use current release_number. The release_number must be a number."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:875
#, no-c-format
msgid "<code><application>Quickly</application> release &#60;release_number&#61;</code> notes about changes where \"notes about changes\" is optional text describing what changes were made since the last save"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:879
#, no-c-format
msgid "Before running <application>Quickly</application> release, you should: create your account and a project page on http://launchpad.net. You also have to add a PPA to your launchpad account."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:883
#, no-c-format
msgid "Name, email and version setup.py will be automatically changed. (version will be &#60;current_release&#61; and bzr will commit and tagged. Once the release is done, &#60;current_release&#61; will be incremented by 0.1 to be ready for next release."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:888
#, no-c-format
msgid "If you previously used <application>Quickly</application> shared &#60;current_release&#61;~publicX will be dropped to release &#60;current_release&#61; version (&#60;current_release&#61;~publicX &#60;current_release&#61;) You can modify the description and long description if you wish."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:893
#, no-c-format
msgid "You can run <code><application>Quickly</application> package</code> and test your package to make sure it installs as expected. (This is not mandatory)"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:899 quickly-ubuntu-application-tutorial.xml:900
#, no-c-format
msgid "<title>run</title>"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:903
#, no-c-format
msgid "Runs your application. This is the best way to try test it out while you are developing it. It starts up the main project window."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:909 quickly-ubuntu-application-tutorial.xml:910
#, no-c-format
msgid "<title>save</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:911
#, no-c-format
msgid "<application>Quickly</application> save notes about changes"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:913
#, no-c-format
msgid "where \"notes about changes\" is optional text describing what changes were made since the last save."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:916
#, no-c-format
msgid "This command commits all changes since the last save to bzr. Note that it does not push changes to any back up location. If you need revert or otherwise use the revision control, use bzr directly: <code>bzr help</code>"
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:924 quickly-ubuntu-application-tutorial.xml:926
#, no-c-format
msgid "<title>share</title>"
msgstr ""

#. Tag: code
#: quickly-ubuntu-application-tutorial.xml:927
#, no-c-format
msgid "<application>Quickly</application> share"
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:929
#, no-c-format
msgid "Updates your PPA with the the latest saved project changes."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:931
#, no-c-format
msgid "Before running <application>Quickly</application> release, you should: create your account on http://launchpad.net. You also have to add a PPA to your launchpad account."
msgstr ""

#. Tag: para
#: quickly-ubuntu-application-tutorial.xml:935
#, no-c-format
msgid "Name, email and version setup.py will be automatically changed. (version will be &#60;current_release~publicX&#61; where X will be incremented at each <application>Quickly</application> share execution) You can modify the description and long description if you wish."
msgstr ""

#. Tag: title
#: quickly-ubuntu-application-tutorial.xml:945
#, no-c-format
msgid "Links"
msgstr ""

#. Tag: link
#: quickly-ubuntu-application-tutorial.xml:947
#, no-c-format
msgid "<link><application>Quickly</application>: <application>Quickly</application> Command Reference</link>"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:950
#, no-c-format
msgid "Blog post on <application>Quickly</application>"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:953
#, no-c-format
msgid "Language: Python Language Reference"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:956
#, no-c-format
msgid "Core Library: Python 2.6 Library Reference"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:959
#, no-c-format
msgid "UI Library: PyGtk"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:962
#, no-c-format
msgid "Database: CouchDB Reference"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:965
#, no-c-format
msgid "UI Editing: Glade User Documenation"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:968
#, no-c-format
msgid "Editor: Gedit Help"
msgstr ""

#. Tag: ulink
#: quickly-ubuntu-application-tutorial.xml:971
#, no-c-format
msgid "Version Control: Bazaar"
msgstr ""

