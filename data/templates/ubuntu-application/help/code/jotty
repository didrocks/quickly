#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk
from desktopcouch.records.server import CouchDatabase
from desktopcouch.records.record import Record

import gettext
from gettext import gettext as _
gettext.textdomain('jotty')

# Add project root directory (enable symlink and trunk execution)
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'jotty'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from jotty import (BaseJottyWindow)
import jotty.helpers as helpers


# See BaseJottyWindow.py for more details about how this class works
class JottyWindow(BaseJottyWindow):
    __gtype_name__ = "JottyWindow"
    
    def finish_initializing(self, builder):
        """Set up the main window"""
        super(JottyWindow, self).finish_initializing(builder)

        # Uncomment the following code to read in preferences at start up (this
        # function is defined in BaseJottyWindow.py).
        # Preferences can be read from the dictionary self.preferences after this call.
        #self.load_preferences()

        # Code for other initialization actions should be added here.
        self.database = CouchDatabase("jotty", create=True)

    def preferences_updated(self):
        """Update window based on preference changes"""
        # This will be called when the preference dialog is closed.
        # Preferences can be read from the dictionary self.preferences.
        pass

    def save_file(self, widget, data=None): 
        #get the title for the note 
        title = self.ui.entry1.get_text() 

        #get the text to save 
        buff = self.ui.textview1.get_buffer() 
        start_iter = buff.get_start_iter() 
        end_iter = buff.get_end_iter() 
        text = buff.get_text(start_iter,end_iter) 

        #get all the records 
        record_type = "http://wiki.ubuntu.com/Quickly/JottyDoc" 
        results = self.database.get_records(record_type = record_type,create_view = True) 

        #update a record that has the same title 
        for result in results: 
            document = result.value 
            if document["title"] == title: 
                key = result.key 
                self.database.update_fields(key, {"text":text}) 
                return
 
        #if no records had the title, create it 
        new_rec = Record({"record_type":record_type,"title":title, "text":text})
        self.database.put_record(new_rec)

    def open_file(self, widget, data=None):
        #get the name of the document to open
        title = self.ui.entry1.get_text()
        text = ""
 
        #get all the records
        record_type = "http://wiki.ubuntu.com/Quickly/JottyDoc"
        results = self.database.get_records(record_type = record_type,create_view = True)
 
        #get the text if there is a matching title
        for result in results:
            document = result.value
            if document["title"] == title:
                text = document["text"]
        
        #set the UI to display the string
        buff = self.ui.textview1.get_buffer()
        buff.set_text(text)

    def new_file(self, widget, data=None):
        self.ui.entry1.set_text("Note Title")
        buff = self.ui.textview1.get_buffer()
        buff.set_text("")

if __name__ == "__main__":
    # Support for command line options.  See helpers.py to add more.
    helpers.parse_options()

    # Run the application.
    window = JottyWindow()
    window.show()
    gtk.main()
